/* ZEDA - Elementary Data and Algorithms
 * Copyright (C) 1998 Tomomichi Sugihara (Zhidao)
 */
/*! \file zeda_rand.h
 * \brief random number generator.
 * \author Zhidao
 */

#include <zeda/zeda_misc.h>

#ifndef __ZEDA_RAND_H__
#define __ZEDA_RAND_H__

__BEGIN_DECLS

/*! random number operations are not available in the kernel space */
#ifndef __KERNEL__

/* ********************************************************** */
/*! \defgroup rand default random number generator
 * convenient reimplementations of the standard rand() function.
 * Note that they are naive implementations of pseudo-random
 * byte sequences.
 * \{ *//* ************************************************** */

/*! \def RAND_MAX
 *  the maximum integer value possibly generated by the random
 *  number generator.
 */
#ifndef RAND_MAX
#define RAND_MAX 2147483647
#endif /* RAND_MAX */

/*! \brief initialize random number generator.
 *
 * zRandInit() initializes the random number sequence,
 * namely, setting the current time for the seed of a
 * new pseudo-random byte sequence.
 */
__EXPORT void zRandInit(void);

/*! \brief generate a random integer value.
 *
 * zRandI() generates a random integer number between
 * the minimum value \a min and the maximum value \a max.
 * \return the generated pseudo-random integer.
 */
__EXPORT int zRandI(int min, int max);

/*! \brief generate a random d-float value.
 *
 * zRandF() generates a pseudo-random double-precision
 * floating-point value between the minimum value \a min
 * and the maximum value \a max.
 * \return the generated pseudo-random value.
 */
__EXPORT double zRandF(double min, double max);

/*! \} */

#endif /* __KERNEL__ */

__END_DECLS

#endif /* __ZEDA_RAND_H__ */
